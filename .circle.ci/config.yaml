version: 2.1


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Frontend Test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend Test.
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/*
      - destroy_environment

  configure-infrastructure:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1c:e1:5e:8c:bb:02:bf:c9:02:93:b4:a3:42:f4:69:28"]
      - attach_workspace:
          at: .
      - run: 
          name: View content of inventory.txt
          command: cat .circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update openssh-server
            pip install --upgrade pip && pip install --upgrade awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy_environment
          
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build] 
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              sudo apt-get update && sudo apt-get install -y ca-certificates
              curl https://kvdb.io/QCrvngsDHrWCoD2iPySHNJ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'

            fi 
      - destroy_environment
      - revert_migrations   

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install sudo, tar, gzip, curl
          command: |
            yum install sudo -y
            yum -y install tar gzip
            yum makecache
            yum install curl.x86_64
      - run:
          name: Install Nodejs and NPM
          command: |
            yum install -y gcc-c++ make
            curl -sL https://rpm.nodesource.com/setup_13.x |sudo -E bash -
            sudo yum install -y nodejs
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy_environment
      - revert_migrations

  deploy-backend:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1c:e1:5e:8c:bb:02:bf:c9:02:93:b4:a3:42:f4:69:28"]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update openssh-server
            apk add --no-cache tar gzip curl
            apk add --update nodejs npm
            apk --no-cache add --virtual builds-deps build-base python3
            pip install --upgrade pip && pip install --upgrade awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install --legacy-peer-deps
            npm run build
            rm -rf node_modules
            cd ..
            # Zip Backend Directory
            tar -C backend -czvf artifact.tar.gz .
            mkdir -m 755 .circleci/ansible/roles/deploy/files/
            cp artifact.tar.gz  .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy_environment
      - revert_migrations

  smoke-test:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --update nodejs npm
            apk --no-cache add --virtual builds-deps build-base python3
            pip install --upgrade pip && pip install --upgrade awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}" >> ip.txt
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="$(cat ip.txt)"
            echo ${API_URL}
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy_environment
      - revert_migrations


  # This is the right way to handle cleanup and update. Notice how I first get the oldWorkflowId before doing updat
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy_environment
      - revert_migrations 
  cleanup:
    docker:
      - image: amazon/aws-cli
      # Docker image here
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Cleanup stacks
          command: |
            export OldWorkflowID=$(aws cloudformation \
            list-exports --query "Exports[?Name==\`WORKFLOW_ID\`].Value" \
            --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation \
            list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            if [[ "$OldWorkflowID" =~ "$CIRCLE_WORKFLOW_ID" ]]
            then
              echo "$OldWorkflowID" != "$WorkFlowID" deleting Old Stack
              aws s3 rm "s3://udapeople-$OldWorkflowID" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-$OldWorkflowID"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-$OldWorkflowID"
            else
              echo "Nothing changes"
            fi     

workflows:
  default1:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [master]
      - run-migrations:
          requires: [configure-infrastructure]
          filters:
            branches:
              only: [master]
      - deploy-frontend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - deploy-backend:
          requires: [run-migrations]
          filters:
            branches:
              only: [master]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          filters:
            branches:
              only: [master]
      - cloudfront-update:
          requires: [smoke-test]
          filters:
            branches:
              only: [master]
      - cleanup:
          requires: [cloudfront-update]
          filters:
            branches:
              only: [master]